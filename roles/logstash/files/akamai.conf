input {
    file {
        path => "/mnt/logs/*"
        start_position => "beginning"
        type => "akamai"
        }
    }

filter {
    grok {
        match => { "message" => "%{NUMBER:unixbegintime}(?: *|\t*)%{IPV4:clientip}(?: *|\t*)%{NOTSPACE:method}(?: *|\t*)%{NOTSPACE:sslversion}(?: *|\t*)%{URIPATHPARAM:uri}(?: *|\t*)%{NOTSPACE:statuscode}(?: *|\t*)%{NOTSPACE:contentbytes}(?: *|\t*)%{NOTSPACE:totalbytesbytes}(?: *|\t*)%{NOTSPACE:objectsize}(?: *|\t*)%{NOTSPACE:uncompressedsize}(?: *|\t*)%{NOTSPACE:httpoverheadbytes}(?: *|\t*)%{QS:referrer}(?: *|\t*)%{QS:user-agent}(?: *|\t*)%{QS:cookie}(?: *|\t*)%{QS:hostheader}(?: *|\t*)%{QS:contenttype}(?: *|\t*)%{NOTSPACE:ssloverhead}(?: *|\t*)%{NOTSPACE:turnaroundms}(?: *|\t*)%{NOTSPACE:transferms}(?: *|\t*)%{QS:requestid}(?: *|\t*)%{NOTSPACE:maxage}(?: *|\t*)%{QS:cachestatus}(?: *|\t*)%{QS:refreshsource}(?: *|\t*)%{NOTSPACE:lastbyteservedflag}(?: *|\t*)%{NOTSPACE:nostoreflag}"}
        remove_field => "message"
        }
    date {
      match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
}

output {
    if "_grokparsefailure" not in [tags] {
    elasticsearch {
        hosts => ["http://localhost:9200"]
        index => "akamai_logs-%{+YYYY-MM-dd}"
        }
     }
    stdout { codec => rubydebug }
}